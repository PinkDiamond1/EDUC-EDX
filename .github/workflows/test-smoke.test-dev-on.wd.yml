name: Smoke Test
on:
  workflow_dispatch:

env: 
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  RUNNER_DEPLOYMENT_NAMESPACE: ${{ secrets.RUNNER_DEPLOYMENT_NAMESPACE }}
  GITHUB_REPO: ${{ github.event.repository.name }}
  ORGANIZATION: bcgov
  GITHUB_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  DeployRunner:
    runs-on: ubuntu-latest
    outputs:
      runner_name: ${{ steps.deploy_runner.outputs.runner_name }}
    steps:
      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

      - name: Deploy runner
        id: deploy_runner
        env:
          RUNNER_IS_NAME: gh-runner-ubuntu-18
          IMAGE_TAGS: latest
          REGISTRY_PATH: ghcr.io/bcgov/gh-runner:latest
        run: |
          set -eux
          # set the necessary env vars
          # create a random runner id, etc
          # note: export used for these vars for envsubst to pick up later on
          export RUNNER_ID=gh-runner-$(echo $RANDOM | md5sum | head -c 20) OPENSHIFT_NAMESPACE=${{ env.RUNNER_DEPLOYMENT_NAMESPACE }} GITHUB_REPO=${{ env.GITHUB_REPO }} ORGANIZATION=${{ env.ORGANIZATION }} GITHUB_ACCESS_TOKEN=${{ env.GITHUB_ACCESS_TOKEN }}
          # exporting runner id to the labels below. One test = one runner.
          # add more labels if you like in csv format (label1,label2,label3,etc.)
          export LABELS=$RUNNER_ID
          # set output of runner name
          echo ::set-output name=runner_name::"$RUNNER_ID"
          DEPLOYMENT_CONFIG_FILE=os-deployment.yaml
          # get config
          wget https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/github-self-hosted-runner/os-deployment-gh-runner.yaml
          # replace vars
          envsubst < os-deployment-gh-runner.yaml > $DEPLOYMENT_CONFIG_FILE
          # Login to OpenShift and select project
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
          oc project ${{ env.RUNNER_DEPLOYMENT_NAMESPACE }}
          # Create imagestream if it doesn't already exist
          oc create imagestream ${{ env.RUNNER_IS_NAME }} 2> /dev/null || true && echo "Runner image stream in place"
          # Tag it
          oc tag ${{ env.REGISTRY_PATH }} ${{ env.RUNNER_IS_NAME }}:${{ env.IMAGE_TAGS }}
          # Deploy runner
          oc apply -f $DEPLOYMENT_CONFIG_FILE
  SmokeTest:
    runs-on: ${{ needs.DeployRunner.outputs.runner_name }}
    environment: dev
    needs: [DeployRunner]
    defaults:
      run:
        working-directory: test
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - run: npm install
      - run: npm run smoke-test
        if: ${{ always() }}
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          EDX_API_BASE_URL: ${{ secrets.EDX_API_BASE_URL }}
          API_HTML_STATUS_CLASS_THRESHOLD: 399
          TOKEN_NAMESPACE: ${{ secrets.TOKEN_NAMESPACE }}
          TOKEN_ENVIRONMENT: ${{ secrets.TOKEN_ENVIRONMENT }}
          TOKEN_CLIENT_ID: ${{ secrets.TOKEN_CLIENT_ID }}
          TOKEN_CLIENT_SECRET: ${{ secrets.TOKEN_CLIENT_SECRET }}
          TOKEN_ENDPOINT: ${{ secrets.TOKEN_ENDPOINT }}
  TearDown:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [DeployRunner, SmokeTest]
    steps:
      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

      - name: Destroy runner
        run: |
          set -eux
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
          oc project ${{ env.RUNNER_DEPLOYMENT_NAMESPACE }}
          oc delete deployment ${{ needs.DeployRunner.outputs.runner_name }}


