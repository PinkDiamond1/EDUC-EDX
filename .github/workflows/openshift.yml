# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# 💁 The OpenShift Starter workflow will:
# - Checkout your repository
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet

# ℹ️ Configure your repository and the workflow with the following steps:
# 1. Have access to an OpenShift cluster. Refer to https://www.openshift.com/try
# 2. Create the OPENSHIFT_SERVER and OPENSHIFT_TOKEN repository secrets. Refer to:
#   - https://github.com/redhat-actions/oc-login#readme
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with '🖊️' if the defaults are not suitable for your project.
# 4. (Optional) Edit the build-image step to build your project.
#    The default build type is by using a Dockerfile at the root of the repository,
#    but can be replaced with a different file, a source-to-image build, or a step-by-step buildah build.
# 5. Commit and push the workflow file to your default branch to trigger a workflow run.

# 👋 Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: OpenShift

env:
  # 🖊️ EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # 🖊️ EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}

  SPLUNK_TOKEN: ${{ secrets.SPLUNK_TOKEN }}

  CA_CERT: ${{ secrets.CA_CERT_DEV }}
  CERTIFICATE: ${{ secrets.CERT_DEV }}
  PRIVATE_KEY: ${{ secrets.PRIV_KEY_DEV }}


  # 🖊️ EDIT with the port your application should be accessible on.
  # If the container image exposes *exactly one* port, this can be left blank.
  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: ""

  # 🖊️ EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

  # 🖊️ EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""

  SOURCE_REPO_URL: https://github.com/bcgov/educ-edx.git

  IMAGE_NAME: edx-backend-master
  DOCKER_ARTIFACTORY_REPO: docker-remote.artifacts.developer.gov.bc.ca
  ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca

  APP_NAME: 'edx'
  REPO_NAME: "educ-edx"
  JOB_NAME: "master"
  APP_NAME_BACKEND: "edx-backend-master"
  APP_NAME_FRONTEND: "edx-frontend"
  APP_NAME_FRONTEND_STATIC: "edx-frontend-static"
  NAMESPACE: ${{ secrets.NAMESPACE_NO_ENV }}
  NAMESPACE_TOOLS: ${{ secrets.NAMESPACE_NO_ENV }}-tools
  COMMON_NAMESPACE: ${{ secrets.COMMON_NAMESPACE_NO_ENV }}
  TAG: "latest"
  TARGET_ENV: "dev"
  MIN_REPLICAS: "1"
  MAX_REPLICAS: "1"
  MIN_CPU: "50m"
  MAX_CPU: "100m"
  MIN_MEM: "200Mi"
  MAX_MEM: "250Mi"
  HOST_ROUTE: "dev.educationdataexchange.gov.bc.ca"

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:

jobs:
  openshift-ci-cd:
    name: Build and deploy to OpenShift
    # ubuntu-20.04 can also be used.
    runs-on: ubuntu-18.04
    environment: production

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v4
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v2

    - name: Determine app name
      if: env.APP_NAME_BACKEND == ''
      run: |
        echo "APP_NAME_BACKEND=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ env.DOCKER_ARTIFACTORY_REPO }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#    # https://github.com/redhat-actions/buildah-build#readme
#    - name: Build backend from Dockerfile
#      id: build-image-backend
#      uses: redhat-actions/buildah-build@v2
#      with:
#        image: ${{ env.APP_NAME_BACKEND }}
#        tags: ${{ env.IMAGE_TAGS }}
#
#        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
#        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
#        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
#        dockerfiles: |
#          ./backend/Dockerfile
#        context: ./backend
#
#      # https://github.com/redhat-actions/push-to-registry#readme
#    - name: Push backend to registry
#      id: push-image-backend
#      uses: redhat-actions/push-to-registry@v2
#      with:
#        image: ${{ steps.build-image-backend.outputs.image }}
#        tags: ${{ steps.build-image-backend.outputs.tags }}
#        registry: ${{ env.IMAGE_REGISTRY }}
#        username: ${{ env.IMAGE_REGISTRY_USER }}
#        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

#    - name: Build frontend from Dockerfile
#      id: build-image-frontend
#      uses: redhat-actions/buildah-build@v2
#      with:
#        image: ${{ env.APP_NAME_FRONTEND }}
#        tags: ${{ env.IMAGE_TAGS }}
#
#        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
#        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
#        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
#        dockerfiles: |
#          ./frontend/Dockerfile
#        context: ./frontend

    - uses: actions/checkout@v2
    - name: Build frontend
      run: |
        set -eux
        # Login to OpenShift and select project
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        oc project ${{ env.NAMESPACE_TOOLS }}
        
        # Process and apply deployment template
        oc process -f tools/openshift/frontend.bc.yaml -p REPO_NAME=${{ env.REPO_NAME }} -p JOB_NAME=${{ env.JOB_NAME }} -p SOURCE_REPO_URL=${{ env.SOURCE_REPO_URL }} -p SOURCE_REPO_REF=master\
        | oc apply -f -

        oc start-build ${{ env.REPO_NAME }}-frontend-${{ env.JOB_NAME }} --wait
        
        oc process -f tools/openshift/frontend-static.bc.yaml -p REPO_NAME=${{ env.REPO_NAME }} -p JOB_NAME=${{ env.JOB_NAME }} -p NAMESPACE=${{ env.NAMESPACE_TOOLS }} -p LICENSE_PLATE=${{ env.NAMESPACE }}\
        | oc apply -f -
        
        oc start-build ${{ env.REPO_NAME }}-frontend-static --wait

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

      # https://github.com/redhat-actions/oc-login#readme
    - uses: actions/checkout@v2
    - name: Deploy
      run: |
        set -eux
        # Login to OpenShift and select project
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        oc project ${{ env.OPENSHIFT_NAMESPACE }}
        # Cancel any rollouts in progress
        oc rollout cancel dc/${{ env.IMAGE_NAME }} 2> /dev/null \
        || true && echo "No rollout in progress"
        
        # Create the image stream if it doesn't exist
        oc create imagestream ${{ env.REPO_NAME }}-backend-${{ env.JOB_NAME }} 2> /dev/null || true && echo "Backend image stream in place"
        oc create imagestream ${{ env.REPO_NAME }}-frontend-static 2> /dev/null || true && echo "Frontend image stream in place"
        
        oc tag ${{ steps.push-image-backend.outputs.registry-path }} ${{ env.REPO_NAME }}-backend-${{ env.JOB_NAME }}:${{ env.TAG }}
        oc tag ${{ steps.push-image-frontend.outputs.registry-path }} ${{ env.REPO_NAME }}-frontend-static:${{ env.TAG }}
        
        # Process and apply deployment template
        oc process -f tools/openshift/backend.dc.ocp4.yaml -p APP_NAME=${{ env.APP_NAME }} -p REPO_NAME=${{ env.REPO_NAME }} -p JOB_NAME=${{ env.JOB_NAME }} -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} -p TAG=${{ env.TAG }} -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} -p MIN_CPU=${{ env.MIN_CPU }} -p MAX_CPU=${{ env.MAX_CPU }} -p MIN_MEM=${{ env.MIN_MEM }} -p MAX_MEM=${{ env.MAX_MEM }} -p HOST_ROUTE=${{ env.HOST_ROUTE }}\
        | oc apply -f -
        
        # Process and apply deployment template
        oc process -f tools/openshift/frontend-static.dc.ocp4.yaml -p APP_NAME=${{ env.APP_NAME }} -p REPO_NAME=${{ env.REPO_NAME }} -p JOB_NAME=${{ env.JOB_NAME }} -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} -p TAG=${{ env.TAG }} -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} -p MIN_CPU=${{ env.MIN_CPU }} -p MAX_CPU=${{ env.MAX_CPU }} -p MIN_MEM=${{ env.MIN_MEM }} -p MAX_MEM=${{ env.MAX_MEM }} -p HOST_ROUTE=${{ env.HOST_ROUTE }} -p CA_CERT=${{ env.CA_CERT }} -p CERTIFICATE=${{ env.CERTIFICATE }} -p PRIVATE_KEY=${{ env.PRIVATE_KEY }}\
        | oc apply -f -
        
        curl -s https://raw.githubusercontent.com/bcgov/${{ env.REPO_NAME }}/master/tools/jenkins/update-configmap.sh | bash /dev/stdin ${{ env.TARGET_ENV }} ${{ env.APP_NAME }} ${{ env.NAMESPACE }} ${{ env.COMMON_NAMESPACE }} ${{ env.SPLUNK_TOKEN }}
        
        # Start rollout (if necessary) and follow it
        oc rollout latest dc/${{ env.IMAGE_NAME }} 2> /dev/null \
        || true && echo "Rollout in progress"
        oc logs -f dc/${{ env.IMAGE_NAME }}
        # Get status, returns 0 if rollout is successful
        oc rollout status dc/${{ env.IMAGE_NAME }}
#    - name: Deploy
#      uses: actions/checkout@v2
#      run: |


#    # This step should create a deployment, service, and route to run your app and expose it to the internet.
#    # https://github.com/redhat-actions/oc-new-app#readme
#    - name: Create and expose app
#      id: deploy-and-expose
#      uses: redhat-actions/oc-new-app@v1
#      with:
#        app_name: ${{ env.APP_NAME }}
#        image: ${{ steps.push-image.outputs.registry-path }}
#        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
#        port: ${{ env.APP_PORT }}
#
#    - name: Print application URL
#      env:
#        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
#        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
#      run: |
#        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
#        echo
#        echo "======================== Your application is available at: ========================"
#        echo ${{ env.ROUTE }}
#        echo "==================================================================================="
#        echo
#        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
